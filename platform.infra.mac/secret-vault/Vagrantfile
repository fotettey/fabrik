# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: "echo Hello from $(hostname)"
  config.vm.provision "shell" do |ssh|
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    ssh.inline = <<-SHELL
      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
      echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
      BERLIN_TZ=$(timedatectl list-timezones | grep Berlin)
      timedatectl set-timezone ${BERLIN_TZ}
      timedatectl
      mkdir -p /home/vagrant/projects
      chown -R vagrant:vagrant /home/vagrant/projects
      SHELL

  config.vm.provision "file", source: "~/.ssh/git-auto", destination: "/home/vagrant/.ssh/git-auto"  ## user: fotettey.at.gmail.com
  config.vm.provision "file", source: "~/Documents/GitHub/fabrik/platform.infra.mac/ansible/build-playbook.yaml", destination: "/home/vagrant/projects/build-playbook.yaml"  ## user: fotettey.at.gmail.com
  config.vm.synced_folder "~/Documents/VAGRANT-DEVBOX-DOCUMENTS/vault-data/app-data", "/home/vagrant/vault-data/app-data", type: "smb"
  config.vm.synced_folder "~/Documents/VAGRANT-DEVBOX-DOCUMENTS/certs", "/home/vagrant/vault-data/certs", type: "smb"

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    DEBIAN_FRONTEND=noninteractive sh -c 'echo $DEBIAN_FRONTEND'
    # Ansible Installation
    ## https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-rocky-linux-9
    ## https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#intro-installation-guide
    ## https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.html#ansible-changelogs
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py --user
    python3 -m pip -V
    sudo dnf install epel-release -y
    sudo dnf install ansible -y
    ansible-galaxy role install geerlingguy.docker
    ansible-galaxy role install geerlingguy.git
    export ANSIBLE_HOST_KEY_CHECKING=False
    ansible-playbook /home/vagrant/projects/build-playbook.yaml --become 
    git --version
    docker --version
    sudo groupadd docker
    sudo usermod -aG docker $USER
    newgrp docker
    sudo chmod 666 /var/run/docker.sock
    sudo chown "$USER":"$USER" /home/"$USER"/.docker -R || echo "Docker post step non-fatal error"
    sudo chmod g+rwx "$HOME/.docker" -R  || echo "Docker post step non-fatal error"
    docker run --name hello-world hello-world || echo "Docker post step non-fatal error"
    docker rm hello-world  || echo "Docker post step non-fatal error"
    GIT_USERNAME=fotettey
    GIT_EMAIL=fotettey@gmail.com
    git config --global user.name ${GIT_USERNAME}
    git config --global user.email ${GIT_EMAIL}
    # Adding Git SSH Identity:
    chmod 400 .ssh/git-auto
    eval "$(ssh-agent -s)"
    ssh-add /home/vagrant/.ssh/git-auto
    # Git Clone Projects
    cd /home/vagrant/projects
    GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone git@github.com:fotettey/software.factory.git
    GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone https://github.com/fotettey/fabrik.git
     # sudo chmod u+rw,g+rw,o+rw /home/vagrant/projects/software.factory/certs/
     # cd /home/vagrant/projects/software.factory/certs/
     # tar -xvzf intCA.tgz
     # tar -xvzf wildcard.tgz
     # sudo chmod 644 -R /home/vagrant/projects/software.factory/certs/
     # sudo chown $(whoami):$(whoami) /home/vagrant/projects/software.factory/certs/
    echo "Installing `hostname` using Docker Compose"
    cd /home/vagrant/projects/fabrik
    git checkout apps-dev
    sudo chmod +x /home/vagrant/projects/fabrik/apps/vault/install-docker/vault-configs/vault-init.sh || echo "CHMOD step for vault-init.sh non-fatal error"
    docker compose -f /home/vagrant/projects/fabrik/apps/vault/install-docker/docker-compose.yml up -d
    SHELL
  end


  config.vm.define "vault" do |vault|
    vault.vm.box = "bento/rockylinux-9"
    vault.vm.network :private_network
    vault.vm.synced_folder ".", "/vagrant", disabled: true
    vault.vm.boot_timeout = 3000

    vault.vm.hostname = "vault"
    vault.vm.provider "vmware_desktop" do |v|
      v.vmx["memsize"] = "2024"
      v.vmx["numvcpus"] = "2"
      v.gui = false
      v.vmx["ethernet0.pcislotnumber"] = "160"
    end
  end


end

